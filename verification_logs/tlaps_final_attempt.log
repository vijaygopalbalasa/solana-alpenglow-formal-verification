(* loading fingerprints in ".tlacache/QuorumIntersection.tlaps/fingerprints" *)
(* created new ".tlacache/QuorumIntersection.tlaps/QuorumIntersection.thy" *)
(* fingerprints written in ".tlacache/QuorumIntersection.tlaps/fingerprints" *)
File "./proofs/QuorumIntersection.tla", line 129, characters 9-10:
[ERROR]: Could not prove or check:
           ASSUME NEW CONSTANT Validators,
                  NEW CONSTANT Stake,
                  NEW CONSTANT TotalStake,
                  NEW CONSTANT FastThreshold,
                  NEW CONSTANT SlowThreshold,
                  StakeFunction == Stake \in [Validators -> Nat],
                  NEW CONSTANT SumStake
                  (_),
                  SumStakeEmpty == SumStake({}) = 0,
                  SumStakeDisjoint ==
                    \A S1, S2 \in SUBSET Validators :
                       S1 \cap S2 = {}
                       => SumStake(S1 \cup S2) = SumStake(S1) + SumStake(S2),
                  SumStakeMonotone ==
                    \A S1, S2 \in SUBSET Validators :
                       S1 \subseteq S2 => SumStake(S1) =< SumStake(S2),
                  SumStakeTotal == SumStake(Validators) = TotalStake,
                  SumStakeBound ==
                    \A S \in SUBSET Validators : SumStake(S) =< TotalStake,
                  SumStakeUnion ==
                    \A S1, S2 \in SUBSET Validators :
                       SumStake(S1) + SumStake(S2)
                       = SumStake(S1 \cup S2) + SumStake(S1 \cap S2),
                  SumStakeNat ==
                    \A S \in SUBSET Validators : SumStake(S) \in Nat,
                  ThresholdBounds ==
                    /\ TotalStake \in Nat
                    /\ FastThreshold \in Nat
                    /\ SlowThreshold \in Nat
                    /\ FastThreshold = (TotalStake * 8) \div 10
                    /\ SlowThreshold = (TotalStake * 6) \div 10
                    /\ 2 * FastThreshold > TotalStake
                    /\ 2 * SlowThreshold > TotalStake,
                  ArithmeticSubtraction ==
                    \A a, b, c \in Nat :
                       a + b >= c => a >= c - b \/ b >= c - a,
                  ArithmeticDoubling ==
                    \A a, c \in Nat : a >= c /\ a >= c => a + a >= 2 * c,
                  ArithmeticInequality ==
                    \A a, b, c \in Nat : a >= b + c /\ c > 0 => a > b,
                  ArithmeticTransitivity ==
                    \A a, b, c \in Nat : a >= b /\ b >= c => a >= c,
                  NEW CONSTANT Q1 \in 
                  SUBSET Validators,
                  NEW CONSTANT Q2 \in 
                  SUBSET Validators,
                  SumStake(Q1) >= SlowThreshold ,
                  SumStake(Q2) >= SlowThreshold ,
                  <1>1 ,
                  <1>2 ,
                  <2>1 ,
                  SumStakeNat ,
                  ArithmeticTransitivity ,
                  ArithmeticSubtraction 
           PROVE  0 >= 2 * SlowThreshold - TotalStake
File "./proofs/QuorumIntersection.tla", line 130, characters 15-16:
[ERROR]: Could not prove or check:
           ASSUME NEW CONSTANT Validators,
                  NEW CONSTANT Stake,
                  NEW CONSTANT TotalStake,
                  NEW CONSTANT FastThreshold,
                  NEW CONSTANT SlowThreshold,
                  StakeFunction == Stake \in [Validators -> Nat],
                  NEW CONSTANT SumStake
                  (_),
                  SumStakeEmpty == SumStake({}) = 0,
                  SumStakeDisjoint ==
                    \A S1, S2 \in SUBSET Validators :
                       S1 \cap S2 = {}
                       => SumStake(S1 \cup S2) = SumStake(S1) + SumStake(S2),
                  SumStakeMonotone ==
                    \A S1, S2 \in SUBSET Validators :
                       S1 \subseteq S2 => SumStake(S1) =< SumStake(S2),
                  SumStakeTotal == SumStake(Validators) = TotalStake,
                  SumStakeBound ==
                    \A S \in SUBSET Validators : SumStake(S) =< TotalStake,
                  SumStakeUnion ==
                    \A S1, S2 \in SUBSET Validators :
                       SumStake(S1) + SumStake(S2)
                       = SumStake(S1 \cup S2) + SumStake(S1 \cap S2),
                  SumStakeNat ==
                    \A S \in SUBSET Validators : SumStake(S) \in Nat,
                  ThresholdBounds ==
                    /\ TotalStake \in Nat
                    /\ FastThreshold \in Nat
                    /\ SlowThreshold \in Nat
                    /\ FastThreshold = (TotalStake * 8) \div 10
                    /\ SlowThreshold = (TotalStake * 6) \div 10
                    /\ 2 * FastThreshold > TotalStake
                    /\ 2 * SlowThreshold > TotalStake,
                  ArithmeticSubtraction ==
                    \A a, b, c \in Nat :
                       a + b >= c => a >= c - b \/ b >= c - a,
                  ArithmeticDoubling ==
                    \A a, c \in Nat : a >= c /\ a >= c => a + a >= 2 * c,
                  ArithmeticInequality ==
                    \A a, b, c \in Nat : a >= b + c /\ c > 0 => a > b,
                  ArithmeticTransitivity ==
                    \A a, b, c \in Nat : a >= b /\ b >= c => a >= c,
                  NEW CONSTANT Q1 \in 
                  SUBSET Validators,
                  NEW CONSTANT Q2 \in 
                  SUBSET Validators,
                  SumStake(Q1) >= SlowThreshold ,
                  SumStake(Q2) >= SlowThreshold ,
                  <2>2 ,
                  <1>3 ,
                  ArithmeticInequality 
           PROVE  FALSE
File "./proofs/QuorumIntersection.tla", line 108, characters 9-10:
[ERROR]: Could not prove or check:
           ASSUME NEW CONSTANT Validators,
                  NEW CONSTANT Stake,
                  NEW CONSTANT TotalStake,
                  NEW CONSTANT FastThreshold,
                  NEW CONSTANT SlowThreshold,
                  StakeFunction == Stake \in [Validators -> Nat],
                  NEW CONSTANT SumStake
                  (_),
                  SumStakeEmpty == SumStake({}) = 0,
                  SumStakeDisjoint ==
                    \A S1, S2 \in SUBSET Validators :
                       S1 \cap S2 = {}
                       => SumStake(S1 \cup S2) = SumStake(S1) + SumStake(S2),
                  SumStakeMonotone ==
                    \A S1, S2 \in SUBSET Validators :
                       S1 \subseteq S2 => SumStake(S1) =< SumStake(S2),
                  SumStakeTotal == SumStake(Validators) = TotalStake,
                  SumStakeBound ==
                    \A S \in SUBSET Validators : SumStake(S) =< TotalStake,
                  SumStakeUnion ==
                    \A S1, S2 \in SUBSET Validators :
                       SumStake(S1) + SumStake(S2)
                       = SumStake(S1 \cup S2) + SumStake(S1 \cap S2),
                  SumStakeNat ==
                    \A S \in SUBSET Validators : SumStake(S) \in Nat,
                  ThresholdBounds ==
                    /\ TotalStake \in Nat
                    /\ FastThreshold \in Nat
                    /\ SlowThreshold \in Nat
                    /\ FastThreshold = (TotalStake * 8) \div 10
                    /\ SlowThreshold = (TotalStake * 6) \div 10
                    /\ 2 * FastThreshold > TotalStake
                    /\ 2 * SlowThreshold > TotalStake,
                  ArithmeticSubtraction ==
                    \A a, b, c \in Nat :
                       a + b >= c => a >= c - b \/ b >= c - a,
                  ArithmeticDoubling ==
                    \A a, c \in Nat : a >= c /\ a >= c => a + a >= 2 * c,
                  ArithmeticInequality ==
                    \A a, b, c \in Nat : a >= b + c /\ c > 0 => a > b,
                  ArithmeticTransitivity ==
                    \A a, b, c \in Nat : a >= b /\ b >= c => a >= c,
                  NEW CONSTANT Q1 \in 
                  SUBSET Validators,
                  NEW CONSTANT Q2 \in 
                  SUBSET Validators,
                  SumStake(Q1) >= FastThreshold ,
                  SumStake(Q2) >= FastThreshold ,
                  <1>1 ,
                  <1>2 ,
                  <2>1 ,
                  SumStakeNat ,
                  ArithmeticTransitivity ,
                  ArithmeticSubtraction 
           PROVE  0 >= 2 * FastThreshold - TotalStake
File "./proofs/QuorumIntersection.tla", line 109, characters 15-16:
[ERROR]: Could not prove or check:
           ASSUME NEW CONSTANT Validators,
                  NEW CONSTANT Stake,
                  NEW CONSTANT TotalStake,
                  NEW CONSTANT FastThreshold,
                  NEW CONSTANT SlowThreshold,
                  StakeFunction == Stake \in [Validators -> Nat],
                  NEW CONSTANT SumStake
                  (_),
                  SumStakeEmpty == SumStake({}) = 0,
                  SumStakeDisjoint ==
                    \A S1, S2 \in SUBSET Validators :
                       S1 \cap S2 = {}
                       => SumStake(S1 \cup S2) = SumStake(S1) + SumStake(S2),
                  SumStakeMonotone ==
                    \A S1, S2 \in SUBSET Validators :
                       S1 \subseteq S2 => SumStake(S1) =< SumStake(S2),
                  SumStakeTotal == SumStake(Validators) = TotalStake,
                  SumStakeBound ==
                    \A S \in SUBSET Validators : SumStake(S) =< TotalStake,
                  SumStakeUnion ==
                    \A S1, S2 \in SUBSET Validators :
                       SumStake(S1) + SumStake(S2)
                       = SumStake(S1 \cup S2) + SumStake(S1 \cap S2),
                  SumStakeNat ==
                    \A S \in SUBSET Validators : SumStake(S) \in Nat,
                  ThresholdBounds ==
                    /\ TotalStake \in Nat
                    /\ FastThreshold \in Nat
                    /\ SlowThreshold \in Nat
                    /\ FastThreshold = (TotalStake * 8) \div 10
                    /\ SlowThreshold = (TotalStake * 6) \div 10
                    /\ 2 * FastThreshold > TotalStake
                    /\ 2 * SlowThreshold > TotalStake,
                  ArithmeticSubtraction ==
                    \A a, b, c \in Nat :
                       a + b >= c => a >= c - b \/ b >= c - a,
                  ArithmeticDoubling ==
                    \A a, c \in Nat : a >= c /\ a >= c => a + a >= 2 * c,
                  ArithmeticInequality ==
                    \A a, b, c \in Nat : a >= b + c /\ c > 0 => a > b,
                  ArithmeticTransitivity ==
                    \A a, b, c \in Nat : a >= b /\ b >= c => a >= c,
                  NEW CONSTANT Q1 \in 
                  SUBSET Validators,
                  NEW CONSTANT Q2 \in 
                  SUBSET Validators,
                  SumStake(Q1) >= FastThreshold ,
                  SumStake(Q2) >= FastThreshold ,
                  <2>2 ,
                  <1>3 ,
                  ArithmeticInequality 
           PROVE  FALSE
File "./proofs/QuorumIntersection.tla", line 76, characters 5-6:
[ERROR]: Could not prove or check:
           ASSUME NEW CONSTANT Validators,
                  NEW CONSTANT Stake,
                  NEW CONSTANT TotalStake,
                  NEW CONSTANT FastThreshold,
                  NEW CONSTANT SlowThreshold,
                  StakeFunction == Stake \in [Validators -> Nat],
                  NEW CONSTANT SumStake
                  (_),
                  SumStakeEmpty == SumStake({}) = 0,
                  SumStakeDisjoint ==
                    \A S1, S2 \in SUBSET Validators :
                       S1 \cap S2 = {}
                       => SumStake(S1 \cup S2) = SumStake(S1) + SumStake(S2),
                  SumStakeMonotone ==
                    \A S1, S2 \in SUBSET Validators :
                       S1 \subseteq S2 => SumStake(S1) =< SumStake(S2),
                  SumStakeTotal == SumStake(Validators) = TotalStake,
                  SumStakeBound ==
                    \A S \in SUBSET Validators : SumStake(S) =< TotalStake,
                  SumStakeUnion ==
                    \A S1, S2 \in SUBSET Validators :
                       SumStake(S1) + SumStake(S2)
                       = SumStake(S1 \cup S2) + SumStake(S1 \cap S2),
                  SumStakeNat ==
                    \A S \in SUBSET Validators : SumStake(S) \in Nat,
                  ThresholdBounds ==
                    /\ TotalStake \in Nat
                    /\ FastThreshold \in Nat
                    /\ SlowThreshold \in Nat
                    /\ FastThreshold = (TotalStake * 8) \div 10
                    /\ SlowThreshold = (TotalStake * 6) \div 10
                    /\ 2 * FastThreshold > TotalStake
                    /\ 2 * SlowThreshold > TotalStake,
                  ArithmeticSubtraction ==
                    \A a, b, c \in Nat :
                       a + b >= c => a >= c - b \/ b >= c - a,
                  ArithmeticDoubling ==
                    \A a, c \in Nat : a >= c /\ a >= c => a + a >= 2 * c,
                  ArithmeticInequality ==
                    \A a, b, c \in Nat : a >= b + c /\ c > 0 => a > b,
                  ArithmeticTransitivity ==
                    \A a, b, c \in Nat : a >= b /\ b >= c => a >= c,
                  NEW CONSTANT S1 \in 
                  SUBSET Validators,
                  NEW CONSTANT S2 \in 
                  SUBSET Validators,
                  <1>1 ,
                  <1>2 ,
                  <1>3 ,
                  ArithmeticTransitivity ,
                  ArithmeticSubtraction 
           PROVE  SumStake(S1) + SumStake(S2)
                  =< TotalStake + SumStake(S1 \cap S2)
File "./proofs/QuorumIntersection.tla", line 80, characters 5-6:
[ERROR]: Could not prove or check:
           ASSUME NEW CONSTANT Validators,
                  NEW CONSTANT Stake,
                  NEW CONSTANT TotalStake,
                  NEW CONSTANT FastThreshold,
                  NEW CONSTANT SlowThreshold,
                  StakeFunction == Stake \in [Validators -> Nat],
                  NEW CONSTANT SumStake
                  (_),
                  SumStakeEmpty == SumStake({}) = 0,
                  SumStakeDisjoint ==
                    \A S1, S2 \in SUBSET Validators :
                       S1 \cap S2 = {}
                       => SumStake(S1 \cup S2) = SumStake(S1) + SumStake(S2),
                  SumStakeMonotone ==
                    \A S1, S2 \in SUBSET Validators :
                       S1 \subseteq S2 => SumStake(S1) =< SumStake(S2),
                  SumStakeTotal == SumStake(Validators) = TotalStake,
                  SumStakeBound ==
                    \A S \in SUBSET Validators : SumStake(S) =< TotalStake,
                  SumStakeUnion ==
                    \A S1, S2 \in SUBSET Validators :
                       SumStake(S1) + SumStake(S2)
                       = SumStake(S1 \cup S2) + SumStake(S1 \cap S2),
                  SumStakeNat ==
                    \A S \in SUBSET Validators : SumStake(S) \in Nat,
                  ThresholdBounds ==
                    /\ TotalStake \in Nat
                    /\ FastThreshold \in Nat
                    /\ SlowThreshold \in Nat
                    /\ FastThreshold = (TotalStake * 8) \div 10
                    /\ SlowThreshold = (TotalStake * 6) \div 10
                    /\ 2 * FastThreshold > TotalStake
                    /\ 2 * SlowThreshold > TotalStake,
                  ArithmeticSubtraction ==
                    \A a, b, c \in Nat :
                       a + b >= c => a >= c - b \/ b >= c - a,
                  ArithmeticDoubling ==
                    \A a, c \in Nat : a >= c /\ a >= c => a + a >= 2 * c,
                  ArithmeticInequality ==
                    \A a, b, c \in Nat : a >= b + c /\ c > 0 => a > b,
                  ArithmeticTransitivity ==
                    \A a, b, c \in Nat : a >= b /\ b >= c => a >= c,
                  NEW CONSTANT S1 \in 
                  SUBSET Validators,
                  NEW CONSTANT S2 \in 
                  SUBSET Validators,
                  <1>4 ,
                  <1>5 ,
                  ArithmeticSubtraction 
           PROVE  SumStake(S1 \cap S2)
                  >= SumStake(S1) + SumStake(S2) - TotalStake
File "./proofs/QuorumIntersection.tla", line 1, character 1 to line 162, character 4:
[ERROR]: 6/91 obligations failed.
There were backend errors processing module `"QuorumIntersection"`.
 tlapm ending abnormally with Failure("backend errors: there are unproved obligations")
Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Tlapm_lib.process_module in file "src/tlapm_lib.ml", line 447, characters 12-77
Called from Tlapm_lib.main.f in file "src/tlapm_lib.ml", line 576, characters 23-43
Called from Stdlib__List.fold_left in file "list.ml", line 123, characters 24-34
Called from Tlapm_lib.main in file "src/tlapm_lib.ml", line 579, characters 13-40
Called from Tlapm_lib.init in file "src/tlapm_lib.ml", line 591, characters 8-33

